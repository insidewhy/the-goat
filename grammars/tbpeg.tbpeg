# special
Spacing <- \s^+
Grammar <- (Rule / TreeRule)+

# general
RuleName <= value:([A-Z] ^ [a-zA-Z0-9_]^+)
PropertyName <- [a-z_] ^ [a-zA-Z0-9_]^+

# rules
Rule <= name:RuleName "<-" expression:Expression

# main expression tree
Expression <- $next
Alternation <= expressions:$next |% "/"
Sequence <= expressions:($next / Predicate)|+
Join <=
  expression:$next (
    repetition:("%+" $as "OneOrMore" / "%" $as "ZeroOrMore")
    joinWith:$next
  )|?
Lexeme <= expressions:$next |% "^"
Assignment <= (propertyName:PropertyName ":")|? expression:$next
AsConstant <= expression:$next (~ "$as" ~ value:(String / EscapeSequence))|?
Repetition <= expression:$next repetition:(
  "+" $as "OneOrMore" /
  "*" $as "ZeroOrMore" /
  "^+" $as "LexemeOneOrMore" /
  "^*" $as "LexemeZeroOrMore"
)|?
ExpressionLeaf <-
  Group /
  RuleName &!"<" /
  Constant /
  AnyCharacter /
  EscapeCode /
  Characters /
  NotCharacter /
  Next /
  ToString

ToString <= "$string" ExpressionLeaf

Predicate <= predicate:("&!" $as "NotPredicate" / "&" $as "AndPredicate") expression:ExpressionLeaf

Group <= "(" expression:Expression ")"

# expression leafs
String <= \" ^ value:($string EscapeSequence / ! \")^+ ^ \"
EscapeSequence <= \\ ^ value:(\\ / "n" $as \n / \")
SpacingRule <= "~"
Constant <- String / SpacingRule / EscapeSequence
Next <= "$next"
ToString <= "$string" expression:ExpressionLeaf
AnyCharacter <= "."
NotCharacter <= "!" (character:EscapeSequence / \" ^ character:(! \") ^ \")
EscapeCode <= \\ ^ code:("w" / "s")

# expression leaf for character range
Characters <= "[" ^ matches:(CharacterRange / EscapeCode / EscapeSequence / .)^+ ^ "]"
CharacterRange <= from:\w ^ "-" ^ to:\w

# Tree rules
TreeRule <= name:RuleName "<=" expression:TreeExpression
TreeExpression <- TreeRepetition / TreeJoin / TreeSequence

TreeRepetition <= expression:Expression "|+"
TreeJoin <= expression:Expression "|%" joinWith:Constant

TreeSequence <= expressions:(TreeOption / Join / Predicate)+
TreeOption <= option:Join "|?"
