# special
Spacing <- \s+
Grammar <- (Rule / TreeRule)+

# general
RuleName <= value:([A-Z] ^ [a-zA-Z_]^+)
PropertyName <- [a-z_] ^ [a-zA-Z_]^+

# rules
Rule <= name:RuleName "<-" expression:Expression

# main expression tree
Expression <- $next
Alternation <= expressions:$next |% "/"
Sequence <= expressions:$next|+
Assignment <= (propertyName:PropertyName ":")|? expression:$next
Join <=
  expressions:$next (
    repetition:$enum("%+" $as OneOrMore / "%" $as ZeroOrMore)
    joinWith:$next
  )|?
Lexeme <= expressions:$next |% "^"
Repetition <= expression:$next repetition:$enum(
  "+" $as OneOrMore /
  "*" $as ZeroOrMore /
  "^+" $as LexemeOneOrMore /
  "^*" $as LexemeZeroOrMore /
)|?
ExpressionLeaf <-
  Group /
  (RuleName &!"<") /
  Constant /
  AnyCharacter /
  EscapeCode /
  Enum /
  Characters /
  Next
Group <= "(" expression:Expression ")"

# expression leafs
String <= \" ^ (value:\w*) ^ \"
EscapeSequence <= \\ ^ ( value:(\\ / "n") )
SpacingRule <= "~"
Constant <- String / SpacingRule / EscapeSequence
Next <= "$next"
AnyCharacter <= "."
EscapeCode <= \\ ^ code:("w" / "s")
Enum <= "$enum" "(" expression:(EnumValAssignment %+ "/") ")"
EnumValAssignment <= match:Constant ~ "$as" ~ enumValue:[a-zA-Z_]+

# expression leaf for character range
Characters <= "[" ^ matches:(CharacterRange / EscapeCode / EscapeSequence / \w)+ ^ "]"
CharacterRange <= (from:\w) ^ "-" ^ (to:\w)

# Tree rules
TreeRule <= name:RuleName "<=" expression:TreeExpression
TreeExpression <- TreeRepetition / TreeJoin / TreeOptions / Expression

TreeRepetition <= expression:Expression "|+"
TreeJoin <= expression:Expression "|%" joinWith:Constant

TreeOptions <= options:(Expression / TreeOption)+
TreeOption <= option:Assignment "|?"
